name: Create and publish a Docker image

on:
  push:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  generate-matrix: 
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./charts/
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Check dependencies action checkout step
        uses: actions/checkout@v2
        id: check-dependencies
      - name: set-matrix
        id: set-matrix
        run: |
          ARRAYSTART="{\"path\": [\""
          ARRAYLIST=$(echo *)
          ARRAYLIST="${ARRAYLIST// /\",\"}"
          ARRAYEND="\"]}"
          JSONSTRING="${ARRAYSTART}${ARRAYLIST}${ARRAYEND}"
          echo "::set-output name=matrix::$JSONSTRING"
  build-and-push-image:
    needs: generate-matrix
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy: 
      matrix: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with: 
          fetch-depth: '0'
      
      - name: Check file existence
        id: check_files
        uses: andstor/file-existence-action@v1
        with:
          files: "charts/${{ matrix.path }}/container/Dockerfile"

      - name: Log in to the Container registry
        if: steps.check_files.outputs.files_exists == 'true'
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get helm chart version
        run: | 
          echo HELM_VERSION=$(grep "version: " charts/${{ matrix.path }}/chart/Chart.yaml | cut -f2 -d' ') >> $GITHUB_ENV

      - name: Extract metadata (tags, labels) for Docker
        if: steps.check_files.outputs.files_exists == 'true'
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.path }}
          tags: type=raw, value=${{ env.HELM_VERSION }}

      - name: Build and push Docker image
        if: steps.check_files.outputs.files_exists == 'true'
        uses: docker/build-push-action@v2
        with:
          context: charts/${{ matrix.path }}/container
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
