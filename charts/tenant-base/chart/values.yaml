---
# A list of deployments, this allows for multiple deployments in the same chart.
deployments:
  # Name of the deployments - this is appended on the deployment and service name.
  podinfo:
    # Enable or disable this deployment
    enabled: false
    image:
      # The repository containing the image
      repository: ghcr.io/stefanprodan/podinfo
      # The image tag
      tag: 6.2.1

    # The amount of replicas wanted of this container
    replicaCount: 3

    # The ports on the pod and the equal port on the service and their protocol.
    ports:
      - podPortName: http
        podPort: 9898
        servicePortName: http
        servicePort: 80
        protocol: TCP

    # To allow traffic between different pods in your namespace, you have to create ingress and egress rules.
    # See [this link](https://github.com/distributed-technologies/helm-charts/blob/main/charts/tenant-base/docs/deployment.md#networkpolicy) for more.
    networkPolicy:
      ingress: []
      egress: []

    # A list of secrets to fetch from the vault and mounted on the main pod.
    secrets:
      []
      # - name: token

    # A list of config maps that should be mounted into the main pod as environment variables
    configMaps:
      []
    # - name: foobar

    # A list of PVCs that should be mounted as a folder in the main pod
    # name - Name of the PVC defined in the persistentVolumesClaims list on line ~71
    # path - The path where the folder should be mounted. NOTE! the WILL remove the content of the folder on the host, if it exists already, so aim to choose a path that is know empty.
    pvcs:
      []
      # - name: foobar
      #   path: /tmp/foo

    # Probes are meant for Kubernets to realise when an application is unhealthy and should be restarted.
    # This is most likely a http or gRPC endpoint that Kubernetes call to check if the application is responsive.
    # https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
    # ReadynessProbe is used to tell when the application is ready to accept trafic. Until the readinessProbe is successful a Service will not direct trafic to the Pod.
    readinessProbe: {}
    # LivenessProve is used to tell if the application is healthy.
    livenessProbe: {}

# A list of secrets to fetch from the vault and mounted on the main pod.
secrets:
  []
  # - name: token
  #   key: secret/tenant-foobar/token

# The configMap allows for storage of non secret configurations.
configMaps:
  []
# - name: foobar
#   content:
#     apiKey: qwertyuiop1234567890

# Persistent Volume claims allows for the creation of a volume that will persist even if the pod it's mounted on is destroyed.
persistentVolumeClaims:
  []
  # - name: foobar
  #   size: 8Gi

kafkaTopics:
  # List of Kafka topics to create. You still need to configure the access to the topic in the 'access' block to give applications access to produce or consume to a topic.
  # In practice this generates a KafkaTopic resource in the namespace of the tenant which is the copied to the namespace of the Kafka cluster. This means that the KafkaTopic resource in the tenant namespace will not become Ready even tough its clone in Ready.
  # Requirements: The name of the topics must include the tenants namespace name as prefix. This is to avoid naming collisions between different tenants' Kafka topics.
  #
  #
  # Note: The example shows the only supported configuration fields of a Kafka topic with the default values.
  # If you need to do more advanced configuration of a Kafka topics, please contact the maintainers, so they can add support for the requested configuration field.
  create: []
  #  - name: "example-topic"                  #(required)
  #    replicas: 3
  #    partitions: 1
  #    retention:
  #      ms: 604800000                        #7days
  #      bytes: -1                            #No byte retention
  #  List of Kafka topics to access.
  access: []
  #  - name: "tenant-test-topic"              #(required)
  #    applicationName: "kafka-test-produce"  #(required)
  #    namespace: "tenant-test"               #(required)
  #    produce: false                         #(required)
  #    consume: false                         #(required)
