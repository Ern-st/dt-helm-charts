apiVersion: kafka.strimzi.io/v1beta2
kind: Kafka
metadata:
  name: {{ .Values.cluster.name }}
  labels:
    app: strimzi
spec:
  kafka:
    template:
      pod:
        metadata:
          labels:
            app: kafka-broker
    replicas: {{ .Values.cluster.kafka.replicas }}
    version: {{ .Values.cluster.kafka.version }} 
    logging: 
      type: inline
      loggers:
        kafka.root.logger.level: "INFO"
    resources: 
      requests:
        memory: {{ .Values.cluster.kafka.resources.requests.memory }}
        cpu: {{ .Values.cluster.kafka.resources.requests.cpu }}
      limits:
        memory: {{ .Values.cluster.kafka.resources.limits.memory }}
        cpu: {{ .Values.cluster.kafka.resources.limits.cpu }}
    readinessProbe: 
      initialDelaySeconds: 15
      timeoutSeconds: 5
    livenessProbe:
      initialDelaySeconds: 15
      timeoutSeconds: 5
    jvmOptions: 
      -Xms: 8192m
      -Xmx: 8192m
    listeners: 
      - name: plain 
        port: 9092 
        type: loadbalancer
        tls: false 
      - name: internal
        port: 9093
        type: internal
        tls: false
      
    authorization: 
      type: simple
      superUsers: # TODO add authentication
        - ANONYMOUS
    config: 
      auto.create.topics.enable: {{ .Values.cluster.kafka.autoCreateTopic }}
      offsets.topic.replication.factor: {{ .Values.cluster.kafka.offsetTopicReplicationFactor }}
      transaction.state.log.replication.factor: {{ .Values.cluster.kafka.transactionStateLog.replicationFactor }}
      transaction.state.log.min.isr: {{ .Values.cluster.kafka.transactionStateLog.minimumInSyncReplicas }}
      log.message.format.version: {{ .Values.cluster.kafka.version }}
      inter.broker.protocol.version: {{ .Values.cluster.kafka.version }}
      ssl.cipher.suites: "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384" 
      ssl.enabled.protocols: "TLSv1.2"
      ssl.protocol: "TLSv1.2"
    storage:
      type: persistent-claim 
      size: {{ .Values.cluster.kafka.storage.size }}
      class: {{ .Values.cluster.kafka.storage.class }} 
    metricsConfig:
      type: jmxPrometheusExporter
      valueFrom:
        configMapKeyRef:
          name: kafka-metrics
          key: kafka-metrics-config.yml
  zookeeper:
    template:
      pod:
        metadata:
          labels:
            app: kafka-zookeeper
    replicas: {{ .Values.cluster.zookeeper.replicas }}
    logging:
      type: inline
      loggers:
        zookeeper.root.logger: "INFO"
    resources:
      requests:
        memory: {{ .Values.cluster.zookeeper.resources.requests.memory }}
        cpu: {{ .Values.cluster.zookeeper.resources.requests.cpu }}
      limits:
        memory: {{ .Values.cluster.zookeeper.resources.limits.memory }}
        cpu: {{ .Values.cluster.zookeeper.resources.limits.cpu }}
    jvmOptions:
      -Xms: 4096m
      -Xmx: 4096m
    storage:
      type: persistent-claim
      size: {{ .Values.cluster.zookeeper.storage.size }}
      class: {{ .Values.cluster.zookeeper.storage.class }}
    metricsConfig:
      type: jmxPrometheusExporter
      valueFrom:
        configMapKeyRef:
          name: kafka-metrics
          key: zookeeper-metrics-config.yml
      

  entityOperator: 
    tlsSidecar: 
      resources:
        requests:
          memory: {{ .Values.cluster.entityOperator.tlsSidecar.resources.requests.memory }}
          cpu: {{ .Values.cluster.entityOperator.tlsSidecar.resources.requests.cpu }}
        limits:
          memory: {{ .Values.cluster.entityOperator.tlsSidecar.resources.limits.memory }}
          cpu: {{ .Values.cluster.entityOperator.tlsSidecar.resources.limits.cpu }}
    topicOperator:
      watchedNamespace: {{ .Release.Namespace }}
      reconciliationIntervalSeconds: 60
      logging: 
        type: inline
        loggers:
          rootLogger.level: "INFO"
      resources:
        requests:
          memory: {{ .Values.cluster.entityOperator.topicOperator.resources.requests.memory }}
          cpu: {{ .Values.cluster.entityOperator.topicOperator.resources.requests.cpu }}
        limits:
          memory: {{ .Values.cluster.entityOperator.topicOperator.resources.limits.memory }}
          cpu: {{ .Values.cluster.entityOperator.topicOperator.resources.limits.cpu }}
    userOperator:
      watchedNamespace: {{ .Release.Namespace }}
      reconciliationIntervalSeconds: 60
      logging:
        type: inline
        loggers:
          rootLogger.level: INFO
      resources:
        requests:
          memory: {{ .Values.cluster.entityOperator.userOperator.resources.requests.memory }}
          cpu: {{ .Values.cluster.entityOperator.userOperator.resources.requests.cpu }}
        limits:
            memory: {{ .Values.cluster.entityOperator.userOperator.resources.limits.memory }}
            cpu: {{ .Values.cluster.entityOperator.userOperator.resources.limits.cpu }}
  kafkaExporter:
    topicRegex: ".*"
    groupRegex: ".*"
    resources:
      requests:
        memory: {{ .Values.cluster.kafkaExporter.resources.requests.memory }}
        cpu: {{ .Values.cluster.kafkaExporter.resources.requests.cpu }}
      limits:
        memory: {{ .Values.cluster.kafkaExporter.resources.limits.memory }}
        cpu: {{ .Values.cluster.kafkaExporter.resources.limits.cpu }}
